import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchChartData,
  fetchAllRSIData,
  fetchLivePlusIndicatorData,
  fetchTradeData,
  postSellData,
  insertNewScrip,
  fetchNSEPriceData,
} from "./stockAPI";

const initialState = {
  allRSIData: {},
  chartData: {},
  livePlusIndicatorData: {},
  tradeData: {},
  nsePriceData: {},
};

export const getAllRSIDataAsync = createAsyncThunk(
  "stock/fetchAllRSIData",
  async (amount) => {
    const response = await fetchAllRSIData(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const getChartDataAsync = createAsyncThunk(
  "stock/fetchChartData",
  async (amount) => {
    const response = await fetchChartData(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const getLivePlusIndicatorDataAsync = createAsyncThunk(
  "stock/getLivePlusIndicatorData",
  async () => {
    const response = await fetchLivePlusIndicatorData();
    return response.data;
  }
);

export const getNSEPriceDataAsync = createAsyncThunk(
  "stock/fetchNSEPriceData",
  async () => {
    const response = await fetchNSEPriceData();
    return response.data;
  }
);

export const getTradeDataAsync = createAsyncThunk(
  "stock/getTradeData",
  async (amount) => {
    const response = await fetchTradeData();
    return response.data;
  }
);

export const updateStock = createAsyncThunk(
  "stock/updateStock",
  async (payload) => {
    console.log(payload);
    const response = await postSellData(payload);
    return response.data;
  }
);

export const insertNewScripAsync = createAsyncThunk(
  "stock/insertNewScrip",
  async (payload) => {
    console.log(payload);
    const response = await insertNewScrip(payload);
    return response.data;
  }
);

export const stockSlice = createSlice({
  name: "stocks",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    /*   sellStock: (type, payload) => {
      "stock/sellStock",
        async () => {
          const response = await fetchTradeData();
          return response.data;
        };
    }, */
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllRSIDataAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getAllRSIDataAsync.fulfilled, (state, action) => {
        state.allRSIData = action.payload;
      })
      .addCase(getChartDataAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getChartDataAsync.fulfilled, (state, action) => {
        state.chartData = action.payload;
      })
      .addCase(getLivePlusIndicatorDataAsync.fulfilled, (state, action) => {
        state.livePlusIndicatorData = action.payload;
      })
      .addCase(getNSEPriceDataAsync.fulfilled, (state, action) => {
        state.nsePriceData = action.payload;
      })
      .addCase(getTradeDataAsync.fulfilled, (state, action) => {
        state.tradeData = action.payload;
      });
  },
});

//export const { sellStock } = stockSlice.actions;

export const selectAllRSIData = (state) => state.stocks.allRSIData;
export const selectChartData = (state) => state.stocks.chartData;
export const selectLivePlusIndicatorData = (state) => state.stocks.livePlusIndicatorData;
export const selectTradeData = (state) => state.stocks.tradeData;
export const selectPriceInfo = (state) =>
  state.stocks.livePlusIndicatorData.nse.priceInfo;
export const selectNSEPriceData = (state) => state.stocks.nsePriceData;

export default stockSlice.reducer;
